import * as Interfaces from './interfaces';

//template for creating objects. encapsulates reusable functionality
class UniversityLibrarian implements Interfaces.Librarian{

    name: string;
    email: string;
    department: string;

    assistCustomer(custName: string){
        console.log(this.name + ' is assisting ' + custName)
    }
}


/* Access modifiers -> declared on property/method definitions to control their visibility for consumers of the class (instances)

[public]: default for all class members.
Exception => If Î™ want a constructor parameter as a class property i must declare it as public
-- Instead of
class Author{
    name:string;
    constructor(authorName: string){
        name = authorName;
    }

}
-- Do this
class Author{
    constructor(public name: string){}
}

[private]: accessible only inside the class
[protected]: accessible inside the class or the subclasses of that class

-Static properties- Available only on the class and not on instances of the class
class Library{
    constructor(public name: string){}
    static description: string = 'A source of knowledge';
}
let lib = new Library('Name of the book');
let name = lib.name;
let desc = Library.description; <=== i need to declare an instance to the Library itself to access description variable
*/


// abstract -> used only as base classes for inheritance
abstract class ReferenceItem{

    // _ differentiates the name of the variable from the accessor func
    private _publisher: string;
    static department: string = "Research";

    constructor(public title:string, protected year:number){
        console.log('Creating a new ReferenceItem....')
    }

    // title: string;
    // private year: number;

    // constructor(newTitle?:string, newYear?: number){
    //     console.log('Creating a new ReferenceItem....')
    //     this.title = newTitle;
    //     this.year = newYear;
    // }   

    printItem(): void{
        console.log(`${this.title} was published in ${this.year}.`)
        // static available only on the class and not on instances of the class
        console.log(`Department: ${ReferenceItem.department}.`);
    }

    get publisher(): string{
        return this._publisher.toUpperCase();

    }

    set publisher(newPublisher: string){
        this._publisher = newPublisher;
    }

    //it will be implemented in classes inheriting this
    abstract printCitation(): void;

}

export { UniversityLibrarian, ReferenceItem }