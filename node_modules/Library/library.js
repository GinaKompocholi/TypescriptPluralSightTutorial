"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("Library/enums");
var classes_1 = require("Library/classes");
//old encyclopedia class is now a module
var encyclopedia_1 = require("./encyclopedia");
var utilityFunctions_1 = require("../../moduleDemo/utilityFunctions");
var fee = (0, utilityFunctions_1.CalculateLateFee)(5);
var max = (0, utilityFunctions_1.MaxBooksAllowed)(12);
function GetAllBooks() {
    var books = [
        { id: 1, title: 'C++ advanced', author: 'James Royce', available: true, category: enums_1.Category.Fiction },
        { id: 2, title: 'Java begginers', author: 'Ricchard Hath', available: true, category: enums_1.Category.Fiction },
        { id: 3, title: 'JS explained', author: 'Brian Scots', available: true, category: enums_1.Category.Poetry },
        { id: 4, title: 'Python advanced', author: 'Roland Royce', available: false, category: enums_1.Category.Romance },
    ];
    return books;
}
function LogFirstAvailableBook(books) {
    if (books === void 0) { books = GetAllBooks(); }
    var sumOfBooks = books.length;
    var firtsAvailable = '';
    for (var _i = 0, books_1 = books; _i < books_1.length; _i++) {
        var currentbook = books_1[_i];
        if (currentbook.available) {
            firtsAvailable = currentbook.title;
            break;
        }
    }
    console.log('Total books:' + sumOfBooks);
    console.log('First available book: ' + firtsAvailable);
}
// Array<string> == String[]
// Category[categoryFilter] ??
function GetBookTitlesByCategory(categoryFilter) {
    if (categoryFilter === void 0) { categoryFilter = enums_1.Category.Poetry; }
    console.log('Test : Getting books in Category: ' + enums_1.Category[categoryFilter]);
    var allBooks = GetAllBooks();
    var filteredTitles = [];
    for (var _i = 0, allBooks_1 = allBooks; _i < allBooks_1.length; _i++) {
        var currentbook = allBooks_1[_i];
        if (currentbook.category === categoryFilter) {
            filteredTitles.push(currentbook.title);
        }
    }
    return filteredTitles;
}
function LogBookTitles(titles) {
    for (var _i = 0, titles_1 = titles; _i < titles_1.length; _i++) {
        var title = titles_1[_i];
        console.log('LogBookTitles: Books found: ' + title);
    }
}
function GetBookById(id) {
    var allBooks = GetAllBooks();
    // returns all the fields of the first book (one and only as id is unique)
    return allBooks.filter(function (book) { return book.id === id; })[0];
    // returns only the title of that book
    // return allBooks.filter(book => book.id === id)[0]['title'];
}
var fictionBooks = GetBookTitlesByCategory();
console.log('console.log: ' + fictionBooks);
//with function
LogBookTitles(fictionBooks);
//with arrow function
fictionBooks.forEach(function (val, idx) { return console.log("index: " + ++idx + " - Book Title: " + val); });
console.log('id 2 title: ' + GetBookById(2)['title']);
/************** DECLARING AND USING FUNCTION TYPES *********************/
// CREATION OF FUNCTION
function CreateCustomerID(name, id) {
    return name + id;
}
// VARIABLE DECLARATION AND ASSIGNMENT
var x;
x = 5;
// ****** FUNCTION ********
// FUNCTION TYPE DECLARATION
var IdGeneratorFunc;
// FUNCTION ASSIGNMENT
IdGeneratorFunc = CreateCustomerID;
// CALLING OF FUNCTION
var myID = IdGeneratorFunc('Func', 15);
console.log(myID);
var anotherID = CreateCustomerID('AnotherFunc', 16);
console.log(anotherID);
// ****** ARROW FUNCTION ********
// ARROWFUNCTION TYPE DECLARATION
var IdGeneratorArrowFunc;
// ARROW FUNCTION ASSIGNMENT
IdGeneratorArrowFunc = function (name, id) { return 'ArrowFunc: ' + name + id; };
// CALLING OF ARROW FUNCTION
var myArrowID = IdGeneratorArrowFunc('ArrowFuncName', 30);
console.log(myArrowID);
/************** OPTIONAL AND DEFAULT PARAMETERS *********************/
// BY DEFAULT ALL PARAMETERS ARE REQUIRED
// age? -> is optional and must be placed after required parameters in the function definition
function CreateCustomerExample(name, age) {
}
function GetBookbyTitle(age, title) {
    if (age === void 0) { age = 8; }
    if (title === void 0) { title = 'This is a default value which makes title param optional'; }
}
//I can also set as default another function:
function GetMostPopularBook() {
    return 'To dwro';
}
function GetBookbyTitle2(title) {
    if (title === void 0) { title = GetMostPopularBook(); }
}
/************** REST PARAMETERS *********************/
// ... RestParameter
function GetBooksReadForCust(name) {
    var booksIDs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        booksIDs[_i - 1] = arguments[_i];
    }
}
var books = GetBooksReadForCust('Leigh', 2, 4, 12, 5);
var book2 = GetBooksReadForCust('Niki', 2, 5);
var book3 = GetBooksReadForCust('NoBooksRead');
/************** DEMO DEFINING PARAMETERS *********************/
function CreateCustomer(name, age, city) {
    console.log('Creating customer: ' + name);
    if (age) {
        console.log('Age: ' + age);
    }
    if (city) {
        console.log('City: ' + city);
    }
}
CreateCustomer('Gina');
CreateCustomer('Laura', 27);
CreateCustomer('Laura', 27, 'Athens');
var poetryBooks = GetBookTitlesByCategory(enums_1.Category.Romance);
poetryBooks.forEach(function (title) { return console.log(title); });
var fictionBooks1 = GetBookTitlesByCategory();
fictionBooks1.forEach(function (title) { return console.log(title); });
LogFirstAvailableBook();
function CheckoutBooks(customer) {
    var bookIds = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        bookIds[_i - 1] = arguments[_i];
    }
    console.log('Checking out books for ' + customer);
    var booksCheckedOut = [];
    for (var _a = 0, bookIds_1 = bookIds; _a < bookIds_1.length; _a++) {
        var id = bookIds_1[_a];
        var book = GetBookById(id);
        //console.log(book, book.available)
        if (book.available) {
            booksCheckedOut.push(book.title);
        }
    }
    return booksCheckedOut;
}
var myBooks = CheckoutBooks('Gina', 2, 3);
//myBooks.forEach(title => console.log(title))
console.log("Gina got " + myBooks.length + " books. Books: " + myBooks);
function GetTitles(bookProperty) {
    var allBooks = GetAllBooks();
    var foundTitles = [];
    if (typeof bookProperty == 'string') {
        for (var _i = 0, allBooks_2 = allBooks; _i < allBooks_2.length; _i++) {
            var book = allBooks_2[_i];
            if (book.author === bookProperty) {
                foundTitles.push(book.title);
            }
        }
    }
    else if (typeof bookProperty == 'boolean') {
        for (var _a = 0, allBooks_3 = allBooks; _a < allBooks_3.length; _a++) {
            var book = allBooks_3[_a];
            if (book.available === bookProperty) {
                foundTitles.push(book.title);
            }
        }
    }
    return foundTitles;
}
var jamesRoyceBooks = GetTitles('James Royce');
jamesRoyceBooks.forEach(function (title) { return console.log("James Royce books: " + title); });
var checkedOutBooks = GetTitles(false);
checkedOutBooks.forEach(function (title) { return console.log("checkedOutBooks: " + title); });
/************** INTERFACES *********************/
function PrintBook(book) {
    console.log(book.title + ' by ' + book.author);
}
var myBook = {
    id: 5,
    title: 'Harry Potter',
    author: 'Jane Perganson',
    available: true,
    category: enums_1.Category.Fiction,
    year: 1865,
    copies: 2,
    markDamaged: function (reason) { return console.log('Damaged: ' + reason); }
};
var LaurasBook = {
    id: 5,
    title: 'Harry Potter 3',
    author: 'Jane Perganson',
    available: false,
    category: enums_1.Category.Romance,
    year: 1870,
    copies: 10,
    markDamaged: function (reason) { return console.log('Damaged: ' + reason); }
};
PrintBook(myBook);
PrintBook(LaurasBook);
myBook.markDamaged('missing back cover');
myBook.markDamaged('Chips all over the pages');
// use interface DamageLoger independent of the book interface  
var logDamage;
logDamage = function (damage) { return console.log('Damage reported:' + damage); };
logDamage('Coffee Stains');
var favoriteLibrarian = new classes_1.UniversityLibrarian();
favoriteLibrarian.name = "Sharon";
favoriteLibrarian.assistCustomer('Lynda');
/************** Classes *********************/
/* Î‘bstract classes cant be instantiated. Can only create an instance of their subclass
let ref : ReferenceItem = new ReferenceItem('Updated Facts and Figures', 1988);
ref.printItem();
*/
// let refWithoutParams  = new ReferenceItem();
// ref.printItem();
/************** Class Expressions *********************
 *


let enc: Encyclopedia = new Encyclopedia('How to inherit from abstract class', 2021, 2)
enc.publisher = "Random Data Publishing";
console.log(enc.publisher);

let refBook = new Encyclopedia("WordlRecords", 1985, 10);
refBook.printItem();
let refBook2: ReferenceItem = new Encyclopedia("WordlRecords", 1985, 10);
refBook2.printCitation();

old encyclopedia class is now a module */
var refBook = new encyclopedia_1.default("WordlRecords Module", 1985, 10);
refBook.printItem();
var refBook2 = new encyclopedia_1.default("WordlRecords Module2", 1985, 10);
refBook2.printCitation();
/************** Class Expressions *********************
 *
 * Instead of class statements => class statements
 * Used: where i might normally use other expressions
 *
 * */
//Naming a class in class expression is optional (it will be available only within the class)
// class NameOfClassMissing extends ReferenceItem
var Newspaper = /** @class */ (function (_super) {
    __extends(class_1, _super);
    function class_1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    class_1.prototype.printCitation = function () {
        console.log("Newspaper: " + this.title);
    };
    return class_1;
}(classes_1.ReferenceItem));
//Create new instance of the class using the variable tha received the exp assignment (Newspaper)
var myPaper = new Newspaper('The Gazette', 2016);
myPaper.printCitation();
/* extreme class expression [probably wont be used like that]
Novel extends another class.
This class is just a result of class expression defined in line
Base class property -> title
Novel extends that and adds another property - > mainCharacter */
var Novel = /** @class */ (function (_super) {
    __extends(Novel, _super);
    function Novel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Novel;
}(/** @class */ (function () {
    function class_2() {
    }
    return class_2;
}())));
var favouriteNovel = new Novel();
// property inherited from class expression
favouriteNovel.title = 'test';
console.log(favouriteNovel.title);
// property defined on itself
favouriteNovel.mainCharacter;
/************** MODULES VS NAMESPACES *********************
 * Tools for organising your code
 *
Before TS1.5  => internal&external modules
Afer TS1.5 =>
internal modules = namespaces [for smaller client applications]
external modules = modules [] */
