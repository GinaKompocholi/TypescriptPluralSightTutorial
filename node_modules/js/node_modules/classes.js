"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferenceItem = exports.UniversityLibrarian = void 0;
//template for creating objects. encapsulates reusable functionality
var UniversityLibrarian = /** @class */ (function () {
    function UniversityLibrarian() {
    }
    UniversityLibrarian.prototype.assistCustomer = function (custName) {
        console.log(this.name + ' is assisting ' + custName);
    };
    return UniversityLibrarian;
}());
exports.UniversityLibrarian = UniversityLibrarian;
/* Access modifiers -> declared on property/method definitions to control their visibility for consumers of the class (instances)

[public]: default for all class members.
Exception => If Î™ want a constructor parameter as a class property i must declare it as public
-- Instead of
class Author{
    name:string;
    constructor(authorName: string){
        name = authorName;
    }

}
-- Do this
class Author{
    constructor(public name: string){}
}

[private]: accessible only inside the class
[protected]: accessible inside the class or the subclasses of that class

-Static properties- Available only on the class and not on instances of the class
class Library{
    constructor(public name: string){}
    static description: string = 'A source of knowledge';
}
let lib = new Library('Name of the book');
let name = lib.name;
let desc = Library.description; <=== i need to declare an instance to the Library itself to access description variable
*/
// abstract -> used only as base classes for inheritance
var ReferenceItem = /** @class */ (function () {
    function ReferenceItem(title, year) {
        this.title = title;
        this.year = year;
        console.log('Creating a new ReferenceItem....');
    }
    // title: string;
    // private year: number;
    // constructor(newTitle?:string, newYear?: number){
    //     console.log('Creating a new ReferenceItem....')
    //     this.title = newTitle;
    //     this.year = newYear;
    // }   
    ReferenceItem.prototype.printItem = function () {
        console.log(this.title + " was published in " + this.year + ".");
        // static available only on the class and not on instances of the class
        console.log("Department: " + ReferenceItem.department + ".");
    };
    Object.defineProperty(ReferenceItem.prototype, "publisher", {
        get: function () {
            return this._publisher.toUpperCase();
        },
        set: function (newPublisher) {
            this._publisher = newPublisher;
        },
        enumerable: false,
        configurable: true
    });
    ReferenceItem.department = "Research";
    return ReferenceItem;
}());
exports.ReferenceItem = ReferenceItem;
