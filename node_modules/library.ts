import { Category } from './enums';
import { Book, Logger, Author, Librarian } from './interfaces';
import {UniversityLibrarian, ReferenceItem} from 'classes';
//old encyclopedia class is now a module
import oldEncyclopedia from './encyclopedia';
import { CalculateLateFee as CalcFee, MaxBooksAllowed } from '../moduleDemo/utilityFunctions'

let fee = CalcFee(5);
let max = MaxBooksAllowed(12);

function GetAllBooks(): Book[]{

    let books = [ 
        {id:1, title: 'C++ advanced', author: 'James Royce', available: true, category: Category.Fiction},
        {id:2, title: 'Java begginers',  author: 'Ricchard Hath', available: true, category: Category.Fiction},
        {id:3, title: 'JS explained',  author: 'Brian Scots', available: true, category: Category.Poetry},
        {id:4, title: 'Python advanced', author: 'Roland Royce', available: false, category: Category.Romance},
    ]
    
    return books

}

function LogFirstAvailableBook(books=GetAllBooks()): void{

    let sumOfBooks: number = books.length;
    let firtsAvailable: string = '';

    for(let currentbook of books) {

        if (currentbook.available) {
            firtsAvailable = currentbook.title;
            break;            
        }
    }

    console.log('Total books:' + sumOfBooks);
    console.log('First available book: ' + firtsAvailable);
}

// Array<string> == String[]
// Category[categoryFilter] ??
function GetBookTitlesByCategory(categoryFilter: Category = Category.Poetry) : Array<string> {
    console.log('Test : Getting books in Category: '+Category[categoryFilter]);

    const allBooks = GetAllBooks();
    const filteredTitles: string[] = [];

    for(let currentbook of allBooks){
        if(currentbook.category === categoryFilter){
            filteredTitles.push(currentbook.title);
        }
    }
    return filteredTitles;
}

function LogBookTitles(titles: string[]): void {

    for(let title of titles){
        console.log('LogBookTitles: Books found: '+title);           
    }    
}

function GetBookById(id: number) : Book{
    const allBooks = GetAllBooks()
    // returns all the fields of the first book (one and only as id is unique)
    return allBooks.filter(book => book.id === id)[0];
    // returns only the title of that book
    // return allBooks.filter(book => book.id === id)[0]['title'];
}

const fictionBooks = GetBookTitlesByCategory();
console.log('console.log: '+fictionBooks)

//with function
LogBookTitles(fictionBooks);
//with arrow function
fictionBooks.forEach((val, idx) => console.log(`index: ${++idx} - Book Title: ${val}`));
console.log('id 2 title: '+ GetBookById(2)['title']);

/************** DECLARING AND USING FUNCTION TYPES *********************/

// CREATION OF FUNCTION
function CreateCustomerID(name: string, id: number): string {
    return name + id    
}

// VARIABLE DECLARATION AND ASSIGNMENT
let x: number;
x=5;

// ****** FUNCTION ********
// FUNCTION TYPE DECLARATION
let IdGeneratorFunc: (chars: string, nums: number) => string;
// FUNCTION ASSIGNMENT
IdGeneratorFunc = CreateCustomerID;

// CALLING OF FUNCTION
let myID: string = IdGeneratorFunc('Func', 15);
console.log(myID);

let anotherID: string = CreateCustomerID('AnotherFunc',16);
console.log(anotherID);


// ****** ARROW FUNCTION ********
// ARROWFUNCTION TYPE DECLARATION
let IdGeneratorArrowFunc: (chars: string, nums: number) => string;
// ARROW FUNCTION ASSIGNMENT
IdGeneratorArrowFunc = (name:string, id:number) => {return 'ArrowFunc: ' + name+id};
// CALLING OF ARROW FUNCTION
let myArrowID: string = IdGeneratorArrowFunc('ArrowFuncName', 30);
console.log(myArrowID);

/************** OPTIONAL AND DEFAULT PARAMETERS *********************/
// BY DEFAULT ALL PARAMETERS ARE REQUIRED

// age? -> is optional and must be placed after required parameters in the function definition
function CreateCustomerExample(name: string, age?:number) {
    
}
function GetBookbyTitle(age: number = 8, title: string = 'This is a default value which makes title param optional') {
    
}
//I can also set as default another function:
function GetMostPopularBook() {
    return 'To dwro'
}
function GetBookbyTitle2(title: string = GetMostPopularBook()) {
    
}

/************** REST PARAMETERS *********************/

// ... RestParameter
function GetBooksReadForCust(name:string, ...booksIDs: number[]) {
    
}

let books = GetBooksReadForCust('Leigh', 2, 4, 12 , 5)
let book2 = GetBooksReadForCust('Niki', 2, 5)
let book3 = GetBooksReadForCust('NoBooksRead')


/************** DEMO DEFINING PARAMETERS *********************/

function CreateCustomer(name:string, age?: number, city?: string) {
        console.log('Creating customer: '+name);

        if(age){
            console.log('Age: '+age);
        }
        if(city){
            console.log('City: '+city);
        }
}

CreateCustomer('Gina');
CreateCustomer('Laura', 27)
CreateCustomer('Laura', 27, 'Athens')

let poetryBooks = GetBookTitlesByCategory(Category.Romance);
poetryBooks.forEach(title => console.log(title));
let fictionBooks1 = GetBookTitlesByCategory();
fictionBooks1.forEach(title => console.log(title));

LogFirstAvailableBook();

function CheckoutBooks(customer: string, ...bookIds: number[]): string[] {
    
    console.log('Checking out books for '+ customer);

    let booksCheckedOut: string[] = [];

    for(let id of bookIds){
        let book = GetBookById(id);
        //console.log(book, book.available)
        if (book.available){
            booksCheckedOut.push(book.title);
        }
    }

    return booksCheckedOut
}

let myBooks: string[] = CheckoutBooks('Gina', 2,3)
//myBooks.forEach(title => console.log(title))
console.log(`Gina got ${myBooks.length} books. Books: ${myBooks}`)
  
/************** FUNCTION OVERLOADING *********************/

function GetTitles(author: string): string[];

function GetTitles(available: boolean): string[];

function GetTitles(bookProperty: any): string[]{

    const allBooks = GetAllBooks();
    const foundTitles: string[] = [];

    if(typeof bookProperty == 'string'){
        for(let book of allBooks){
            if(book.author === bookProperty){
                foundTitles.push(book.title);
            }

        }
    }
    else if(typeof bookProperty == 'boolean'){
        for(let book of allBooks){
            if(book.available === bookProperty){
                foundTitles.push(book.title)
            }
        }
    }
    return foundTitles;
}

let jamesRoyceBooks = GetTitles('James Royce')
jamesRoyceBooks.forEach(title => console.log(`James Royce books: ${title}`))
let checkedOutBooks = GetTitles(false)
checkedOutBooks.forEach(title => console.log(`checkedOutBooks: ${title}`))


/************** INTERFACES *********************/

function PrintBook(book:Book): void {
    console.log(book.title + ' by ' + book.author);
}

let myBook = {
    id: 5,
    title: 'Harry Potter',
    author: 'Jane Perganson',
    available: true,
    category: Category.Fiction,
    year: 1865,
    copies: 2,
    markDamaged: (reason: string) => console.log('Damaged: ' + reason)
};
let LaurasBook = {
    id: 5,
    title: 'Harry Potter 3',
    author: 'Jane Perganson',
    available: false,
    category: Category.Romance,
    year: 1870,
    copies: 10,
    markDamaged: (reason: string) => console.log('Damaged: ' + reason)
};

PrintBook(myBook);
PrintBook(LaurasBook);
myBook.markDamaged('missing back cover')
myBook.markDamaged('Chips all over the pages')

// use interface DamageLoger independent of the book interface  
let logDamage: Logger;
logDamage = (damage: string) => console.log('Damage reported:' + damage);
logDamage('Coffee Stains')

let favoriteLibrarian: Librarian = new UniversityLibrarian();
favoriteLibrarian.name = "Sharon";
favoriteLibrarian.assistCustomer('Lynda');

/************** Classes *********************/

/* Î‘bstract classes cant be instantiated. Can only create an instance of their subclass
let ref : ReferenceItem = new ReferenceItem('Updated Facts and Figures', 1988);
ref.printItem();
*/


// let refWithoutParams  = new ReferenceItem();
// ref.printItem();


/************** Class Expressions *********************
 * 


let enc: Encyclopedia = new Encyclopedia('How to inherit from abstract class', 2021, 2)
enc.publisher = "Random Data Publishing";
console.log(enc.publisher);

let refBook = new Encyclopedia("WordlRecords", 1985, 10);
refBook.printItem();
let refBook2: ReferenceItem = new Encyclopedia("WordlRecords", 1985, 10);
refBook2.printCitation();

old encyclopedia class is now a module */

let refBook = new oldEncyclopedia("WordlRecords Module", 1985, 10);
refBook.printItem();
let refBook2 = new oldEncyclopedia("WordlRecords Module2", 1985, 10);
refBook2.printCitation();

/************** Class Expressions *********************
 * 
 * Instead of class statements => class statements 
 * Used: where i might normally use other expressions
 *
 * */

//Naming a class in class expression is optional (it will be available only within the class)
// class NameOfClassMissing extends ReferenceItem
let Newspaper = class extends ReferenceItem{
    printCitation(): void{
        console.log(`Newspaper: ${this.title}`)
    }
}

//Create new instance of the class using the variable tha received the exp assignment (Newspaper)
let myPaper = new Newspaper('The Gazette', 2016);
myPaper.printCitation();


/* extreme class expression [probably wont be used like that]
Novel extends another class.
This class is just a result of class expression defined in line
Base class property -> title
Novel extends that and adds another property - > mainCharacter */

class Novel extends class {title: string | undefined} {
    mainCharacter: string | undefined;
}

let favouriteNovel = new Novel();
// property inherited from class expression
favouriteNovel.title = 'test';
console.log(favouriteNovel.title)
// property defined on itself
favouriteNovel.mainCharacter;

/************** MODULES VS NAMESPACES *********************
 * Tools for organising your code
 * 
Before TS1.5  => internal&external modules
Afer TS1.5 =>
internal modules = namespaces [for smaller client applications]
external modules = modules [] */


